<ID, define> <ID, SYMBOL_TABLE_SIZE> <CONST_INT, 73> <ID, ifndef> <ID, LEXICALANALYZER_LEXBASE_H> <ID, define> <ID, LEXICALANALYZER_LEXBASE_H> <ID, include> <STRING, DataStructure.h> <ID, include> <STRING, Utils.h> <ID, include> <RELOP, <> <ID, locale> <RELOP, >> <ID, SymbolTable> <ID, hashTable> <LPAREN, (> <ID, SYMBOL_TABLE_SIZE> <RPAREN, )> <SEMICOLON, ;> <ID, FILE> <MULOP, *> <ID, logout> <COMMA, ,> <MULOP, *> <ID, tokenout> <SEMICOLON, ;> <INT> <ID, line_count> <ASSIGNOP, => <CONST_INT, 1> <SEMICOLON, ;> <INT> <ID, keyword_count> <ASSIGNOP, => <CONST_INT, 0> <SEMICOLON, ;> <INT> <ID, err_count> <ASSIGNOP, => <CONST_INT, 0> <SEMICOLON, ;> <ID, define> <ID, TOKEN_PRINT_KEY> <STRING, <%s> > <ID, define> <ID, TOKEN_PRINT_SYMBOL> <STRING, <%s, %s> > <ID, define> <ID, LOG_TOKEN_PRINT> <STRING, 
Line no %d: TOKEN <%s> Lexeme %s found
> <ID, define> <ID, LOG_ERROR_PRINT> <STRING, 
<< Error @ Line no %d: %s: %s >>
> <ID, define> <ID, LOG_COMMENT_PRINT> <STRING, 
Line no %d: TOKEN <COMMENT> Lexeme <%s> found
> <VOID> <ID, printLog> <LPAREN, (> <INT> <ID, lineNo> <COMMA, ,> <ID, string> <ID, tokenName> <COMMA, ,> <ID, string> <ID, lexemeName> <RPAREN, )> <LCURL, {> <ID, fprintf> <LPAREN, (> <ID, logout> <COMMA, ,> <ID, LOG_TOKEN_PRINT> <COMMA, ,> <ID, line_count> <COMMA, ,> <ID, tokenName> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, lexemeName> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, insertToHashTable> <LPAREN, (> <ID, string> <ID, token_symbol> <COMMA, ,> <ID, string> <ID, token_name> <RPAREN, )> <LCURL, {> <ID, hashTable> <ID, insert> <LPAREN, (> <ID, token_symbol> <COMMA, ,> <ID, token_name> <RPAREN, )> <SEMICOLON, ;> <ID, hashTable> <ID, printAllScope> <LPAREN, (> <ID, logout> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_keyword> <LPAREN, (> <ID, string> <ID, token_name> <RPAREN, )> <LCURL, {> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_KEY> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, keyword_count> <INCOP, ++> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_keyword> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <ID, StringParser> <ID, toUpperCase> <LPAREN, (> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_KEY> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, keyword_count> <INCOP, ++> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_identifier> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <STRING, ID> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, insertToHashTable> <LPAREN, (> <ID, yytext> <COMMA, ,> <ID, token_name> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_string> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <STRING, STRING> <SEMICOLON, ;> <ID, string> <ID, string_literal> <ASSIGNOP, => <ID, StringParser> <ID, parse> <LPAREN, (> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceFirst> <LPAREN, (> <ID, string_literal> <COMMA, ,> <STRING, "> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceLast> <LPAREN, (> <ID, string_literal> <COMMA, ,> <STRING, "> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceAll> <LPAREN, (> <ID, string_literal> <COMMA, ,> <STRING, \> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, string_literal> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, line_count> <ADDOP, +> <ASSIGNOP, => <ID, StringUtils> <ID, occCount> <LPAREN, (> <ID, yytext> <COMMA, ,> <CONST_CHAR, 
> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_const_int> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <STRING, CONST_INT> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, insertToHashTable> <LPAREN, (> <ID, yytext> <COMMA, ,> <ID, token_name> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_const_float> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <STRING, CONST_FLOAT> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, insertToHashTable> <LPAREN, (> <ID, yytext> <COMMA, ,> <ID, token_name> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_const_char> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, token_name> <ASSIGNOP, => <STRING, CONST_CHAR> <SEMICOLON, ;> <ID, string> <ID, char_literal> <ASSIGNOP, => <ID, StringParser> <ID, parse> <LPAREN, (> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceFirst> <LPAREN, (> <ID, char_literal> <COMMA, ,> <STRING, '> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceLast> <LPAREN, (> <ID, char_literal> <COMMA, ,> <STRING, '> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, char_literal> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, insertToHashTable> <LPAREN, (> <ID, yytext> <COMMA, ,> <ID, token_name> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, addToken_operator> <LPAREN, (> <ID, string> <ID, token_name> <RPAREN, )> <LCURL, {> <ID, fprintf> <LPAREN, (> <ID, tokenout> <COMMA, ,> <ID, TOKEN_PRINT_SYMBOL> <COMMA, ,> <ID, token_name> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, printLog> <LPAREN, (> <ID, line_count> <COMMA, ,> <ID, token_name> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, printError> <LPAREN, (> <ID, string> <ID, msg> <RPAREN, )> <LCURL, {> <ID, fprintf> <LPAREN, (> <ID, logout> <COMMA, ,> <ID, LOG_ERROR_PRINT> <COMMA, ,> <ID, line_count> <COMMA, ,> <ID, msg> <ID, data> <LPAREN, (> <RPAREN, )> <COMMA, ,> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <ID, err_count> <INCOP, ++> <SEMICOLON, ;> <ID, line_count> <ADDOP, +> <ASSIGNOP, => <ID, StringUtils> <ID, occCount> <LPAREN, (> <ID, yytext> <COMMA, ,> <CONST_CHAR, 
> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <VOID> <ID, comment> <LPAREN, (> <RPAREN, )> <LCURL, {> <ID, string> <ID, cmnt> <ASSIGNOP, => <ID, string> <LPAREN, (> <ID, yytext> <RPAREN, )> <SEMICOLON, ;> <IF> <LPAREN, (> <ID, cmnt> <LTHIRD, [> <CONST_INT, 1> <RTHIRD, ]> <RELOP, ==> <CONST_CHAR, /> <RPAREN, )> <LCURL, {> <ID, StringUtils> <ID, replaceFirst> <LPAREN, (> <ID, cmnt> <COMMA, ,> <STRING, //> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceAll> <LPAREN, (> <ID, cmnt> <COMMA, ,> <STRING, \> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <ELSE> <LCURL, {> <ID, StringUtils> <ID, replaceFirst> <LPAREN, (> <ID, cmnt> <COMMA, ,> <STRING, /*> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <ID, StringUtils> <ID, replaceFirst> <LPAREN, (> <ID, cmnt> <COMMA, ,> <STRING, */> <COMMA, ,> <STRING, > <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <ID, fprintf> <LPAREN, (> <ID, logout> <COMMA, ,> <ID, LOG_COMMENT_PRINT> <COMMA, ,> <ID, line_count> <COMMA, ,> <ID, cmnt> <ID, data> <LPAREN, (> <RPAREN, )> <RPAREN, )> <SEMICOLON, ;> <ID, line_count> <ADDOP, +> <ASSIGNOP, => <ID, StringUtils> <ID, occCount> <LPAREN, (> <ID, yytext> <COMMA, ,> <CONST_CHAR, 
> <RPAREN, )> <SEMICOLON, ;> <RCURL, }> <ID, endif> 